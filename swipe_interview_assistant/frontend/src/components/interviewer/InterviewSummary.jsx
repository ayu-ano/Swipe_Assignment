import React, { useState } from 'react';
import { Bot, Copy, CheckCircle, AlertTriangle, ThumbsUp, ThumbsDown } from 'lucide-react';

const InterviewSummary = ({ summary }) => {
  const [copied, setCopied] = useState(false);

  const handleCopySummary = async () => {
    try {
      await navigator.clipboard.writeText(summary);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy summary:', err);
    }
  };

  const getSummarySentiment = () => {
    const positiveWords = ['excellent', 'strong', 'good', 'proficient', 'skilled', 'experienced', 'impressive'];
    const negativeWords = ['weak', 'poor', 'lacking', 'limited', 'basic', 'needs improvement'];
    
    const lowerSummary = summary.toLowerCase();
    const positiveCount = positiveWords.filter(word => lowerSummary.includes(word)).length;
    const negativeCount = negativeWords.filter(word => lowerSummary.includes(word)).length;
    
    if (positiveCount > negativeCount) return 'positive';
    if (negativeCount > positiveCount) return 'negative';
    return 'neutral';
  };

  const getSentimentIcon = () => {
    const sentiment = getSummarySentiment();
    switch (sentiment) {
      case 'positive':
        return <ThumbsUp className="w-5 h-5 text-green-500" />;
      case 'negative':
        return <ThumbsDown className="w-5 h-5 text-red-500" />;
      default:
        return <AlertTriangle className="w-5 h-5 text-yellow-500" />;
    }
  };

  const getSentimentColor = () => {
    const sentiment = getSummarySentiment();
    switch (sentiment) {
      case 'positive':
        return 'border-green-200 bg-green-50';
      case 'negative':
        return 'border-red-200 bg-red-50';
      default:
        return 'border-yellow-200 bg-yellow-50';
    }
  };

  return (
    <div className={`bg-white rounded-lg border ${getSentimentColor()} p-6`}>
      {/* Header */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-600 rounded-full flex items-center justify-center">
            <Bot className="w-5 h-5 text-white" />
          </div>
          <div>
            <h3 className="font-semibold text-gray-900">AI Interview Summary</h3>
            <div className="flex items-center gap-2 text-sm text-gray-500">
              {getSentimentIcon()}
              <span>
                {getSummarySentiment() === 'positive' ? 'Positive assessment' :
                 getSummarySentiment() === 'negative' ? 'Areas for improvement' :
                 'Balanced assessment'}
              </span>
            </div>
          </div>
        </div>
        
        <button
          onClick={handleCopySummary}
          className="flex items-center gap-2 px-3 py-2 text-sm text-gray-600 hover:text-gray-800 hover:bg-white rounded-lg border border-gray-300 transition-colors"
          title="Copy summary to clipboard"
        >
          {copied ? (
            <CheckCircle className="w-4 h-4 text-green-500" />
          ) : (
            <Copy className="w-4 h-4" />
          )}
          {copied ? 'Copied!' : 'Copy'}
        </button>
      </div>

      {/* Summary Content */}
      <div className="prose prose-sm max-w-none">
        <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
          {summary}
        </p>
      </div>

      {/* Key Highlights */}
      <div className="mt-4 pt-4 border-t border-gray-200">
        <h4 className="text-sm font-medium text-gray-900 mb-3">Key Highlights</h4>
        <div className="grid grid-cols-1 gap-2">
          {summary.split('. ').filter(sentence => 
            sentence.length > 20 && 
            !sentence.includes('Overall') && 
            !sentence.includes('summary')
          ).slice(0, 3).map((highlight, index) => (
            <div key={index} className="flex items-start gap-2 text-sm text-gray-600">
              <div className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0" />
              <span>{highlight.trim()}.</span>
            </div>
          ))}
        </div>
      </div>

      {/* Metadata */}
      <div className="mt-4 pt-4 border-t border-gray-200">
        <div className="flex items-center justify-between text-xs text-gray-500">
          <span>Generated by AI Assistant</span>
          <span>Confidence: High</span>
        </div>
      </div>
    </div>
  );
};

export default InterviewSummary;